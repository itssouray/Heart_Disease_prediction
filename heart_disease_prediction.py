# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_V4rdLq1P2-2WciSn4H68at6rEZUgoOc
"""

import pandas as pd;
import numpy as np;
from sklearn.model_selection import train_test_split;
from sklearn.linear_model import LogisticRegression;
from sklearn.metrics import accuracy_score;

data = pd.read_csv('/content/heart.csv')
data.head()

data.tail()

"""checking dimension of data set"""

data.shape

data.isnull().sum

"""checking for null or empty values"""

data.info()

"""checking number of 0 and 1 in target columns"""

data['target'].value_counts()

"""0 --> no heart disease

1 --> heart disease

spliting the features and target values
"""

X = data.drop(['target'],axis=1)
Y = data['target']

print('features : ',X.shape)
print('target : ',Y.shape)

"""spliting the data set into training and testing data"""

from pandas.core.common import random_state
x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print('x train data size : ',x_train.shape)
print('x test data size : ',x_test.shape)

"""training logistic regression model with x train data set"""

model = LogisticRegression()
model.fit(x_train,y_train)

"""predicting values from training data """

training_prediction = model.predict(x_train)

"""checking accuracy score for predicted data """

training_score = accuracy_score(training_prediction,y_train)
print("accuracy on training data : ",training_score)

"""testing our model with test data"""

test_prediction = model.predict(x_test)

test_prediction_score = accuracy_score(test_prediction,y_test)

"""accuracy score on test data : """

print("prediction score on test data : ",test_prediction_score)

"""checking for single row values :"""

inputData = (61,0,0,145,307,0,0,146,1,1,1,0,3)
#change the input data to numpy array
input_data_as_numpy_array = np.asarray(inputData)

#reshaping th numpy array as we are prediting for ony one row
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

print(input_data_reshape)

input_data_reshape.shape

#prediting for input data : 
prediction = model.predict(input_data_reshape)

# print("predicted data : ",prediction)

"""**Final Prediction**"""

if(prediction[0]==0):
  print("The person does not have a heart disease ")
else:
  print("The person have heart disease")

